import streamlit as st
import pandas as pd
import numpy as np
import io

# ==========================
# H√ÄM T√çNH EXPECTED SUPPORT
# ==========================
def expected_support(df, itemset):
    """T√≠nh ESup c·ªßa m·ªôt t·∫≠p m·ª•c trong CSDL kh√¥ng ch·∫Øc ch·∫Øn."""
    esup = 0
    for _, row in df.iterrows():
        prob = np.prod([row[item] for item in itemset])
        esup += prob
    return esup

# ==========================
# 3 GI·∫¢I THU·∫¨T HEURISTIC
# ==========================
def u_aggregate(df, itemset, minsup):
    df_mod = df.copy()
    while expected_support(df_mod, itemset) >= minsup and len(df_mod) > 0:
        df_mod["contrib"] = df_mod.apply(lambda r: np.prod([r[i] for i in itemset]), axis=1)
        max_idx = df_mod["contrib"].idxmax()
        df_mod = df_mod.drop(index=max_idx)
    return df_mod.drop(columns="contrib", errors='ignore')

def u_disaggregate(df, itemset, minsup, remove_all=False):
    """
    U-Disaggregate: X√≥a item nh·∫°y c·∫£m trong c√°c giao d·ªãch c√≥ ƒë√≥ng g√≥p l·ªõn nh·∫•t
    ƒë·ªÉ l√†m gi·∫£m Expected Support c·ªßa t·∫≠p m·ª•c nh·∫°y c·∫£m.
    
    - remove_all=False: ch·ªâ x√≥a item ƒë·∫ßu ti√™n trong itemset
    - remove_all=True: x√≥a to√†n b·ªô item trong itemset
    """
    df_mod = df.copy()

    while expected_support(df_mod, itemset) >= minsup:
        # T√≠nh ƒë·ªô ƒë√≥ng g√≥p c·ªßa t·ª´ng giao d·ªãch
        contrib = df_mod.apply(lambda r: np.prod([r[i] for i in itemset]), axis=1)
        max_idx = contrib.idxmax()  # ch·ªçn d√≤ng c√≥ contrib cao nh·∫•t

        # X√≥a item nh·∫°y c·∫£m trong giao d·ªãch ƒë√≥
        if remove_all:
            for i in itemset:
                df_mod.loc[max_idx, i] = 0
        else:
            df_mod.loc[max_idx, itemset[0]] = 0  # ch·ªâ x√≥a item ƒë·∫ßu ti√™n

    return df_mod


def u_hybrid(df, itemset, minsup):
    df_mod = u_disaggregate(df, itemset, minsup, reduce_factor=0.7)
    df_mod = u_aggregate(df_mod, itemset, minsup)
    return df_mod

# ==========================
# DIFFERENTIAL PRIVACY (DP)
# ==========================
def add_dp_noise(esup, epsilon=1.0, delta_f=1.0):
    noise = np.random.laplace(0, delta_f/epsilon)
    return esup + noise

# ==========================
# GIAO DI·ªÜN STREAMLIT
# ==========================
st.set_page_config(page_title="Heuristic + Differential Privacy", layout="wide")
st.title("üîí ·∫®n c√°c t·∫≠p m·ª•c nh·∫°y c·∫£m trong CSDL kh√¥ng ch·∫Øc ch·∫Øn")
st.markdown("### G·ªìm 2 giai ƒëo·∫°n: Heuristic Hiding ‚Üí Differential Privacy")

# ==========================
# NH·∫¨P D·ªÆ LI·ªÜU
# ==========================
st.sidebar.header("üì• Nh·∫≠p d·ªØ li·ªáu")
uploaded_file = st.sidebar.file_uploader("Ch·ªçn file TXT ho·∫∑c CSV", type=["txt", "csv"])

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(".txt"):
            content = uploaded_file.read().decode("utf-8")
            df = pd.read_csv(io.StringIO(content), delim_whitespace=True)
            if not all(isinstance(x, str) for x in df.columns):
                num_cols = df.shape[1]
                df.columns = [f"I{i+1}" for i in range(num_cols)]
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file: {e}")
        st.stop()
else:
    st.sidebar.info("Ho·∫∑c d√πng d·ªØ li·ªáu v√≠ d·ª•:")
    df = pd.DataFrame({
        'A': [0.9, 0.7, 0.2],
        'B': [0.6, 0.5, 0.9],
        'C': [0.1, 0.4, 0.3]
    })

st.write("### üßÆ C∆° s·ªü d·ªØ li·ªáu ban ƒë·∫ßu:")
st.dataframe(df)

# ==========================
# CH·ªåN THAM S·ªê
# ==========================
items = list(df.columns)
itemset = st.multiselect("Ch·ªçn t·∫≠p m·ª•c nh·∫°y c·∫£m:", items)
if len(itemset) == 0:
    st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m·ª•c trong t·∫≠p nh·∫°y c·∫£m.")
    st.stop()

minsup = st.slider("Ng∆∞·ª°ng h·ªó tr·ª£ k·ª≥ v·ªçng (min_esup)", 0.1, float(len(df)), 1.0, 0.1)
epsilon = st.slider("Gi√° tr·ªã Œµ (Differential Privacy)", 0.1, 5.0, 1.0, 0.1)
algo = st.selectbox("Ch·ªçn gi·∫£i thu·∫≠t Heuristic:", ["U-Aggregate", "U-Disaggregate", "U-Hybrid"])

# ==========================
# GIAI ƒêO·∫†N 1: HEURISTIC HIDING
# ==========================
st.markdown("---")
st.subheader("üß± Giai ƒëo·∫°n 1 ‚Äì ·∫®n t·∫≠p m·ª•c nh·∫°y c·∫£m b·∫±ng Heuristic")

if st.button("‚ñ∂Ô∏è Th·ª±c thi Giai ƒëo·∫°n 1"):
    esup_before = expected_support(df, itemset)
    st.info(f"üîπ Expected Support ban ƒë·∫ßu c·ªßa t·∫≠p {itemset}: **{esup_before:.4f}**")

    if esup_before < minsup:
        st.warning("‚ö†Ô∏è T·∫≠p m·ª•c n√†y KH√îNG ph·∫£i frequent (ESup < min_sup) ‚Üí kh√¥ng c·∫ßn ·∫©n.")
        st.stop()

    if algo == "U-Aggregate":
        df_hidden = u_aggregate(df, itemset, minsup)
        method = "U-Aggregate"
    elif algo == "U-Disaggregate":
        df_hidden = u_disaggregate(df, itemset, minsup)
        method = "U-Disaggregate"
    else:
        df_hidden = u_hybrid(df, itemset, minsup)
        method = "U-Hybrid"

    esup_after = expected_support(df_hidden, itemset)
    st.success(f"‚úÖ ƒê√£ √°p d·ª•ng {method}! ESup sau khi ·∫©n = {esup_after:.4f}")

    st.write("### ‚úÖ CSDL sau khi ·∫©n:")
    st.dataframe(df_hidden)

    # L∆∞u k·∫øt qu·∫£ giai ƒëo·∫°n 1 v√†o session_state
    st.session_state["df_hidden"] = df_hidden
    st.session_state["esup_after"] = esup_after

# ==========================
# GIAI ƒêO·∫†N 2: DIFFERENTIAL PRIVACY
# ==========================
st.markdown("---")
st.subheader("üîê Giai ƒëo·∫°n 2 ‚Äì Th√™m Differential Privacy (DP)")

if "df_hidden" in st.session_state:
    df_hidden = st.session_state["df_hidden"]
    esup_after = st.session_state["esup_after"]

    if st.button("üßÆ √Åp d·ª•ng Giai ƒëo·∫°n 2 (DP)"):
        esup_noisy = add_dp_noise(esup_after, epsilon)
        st.info(f"Expected Support g·ªëc sau ·∫©n: **{esup_after:.4f}**")
        st.success(f"Expected Support sau khi th√™m nhi·ªÖu (Œµ={epsilon}): **{esup_noisy:.4f}**")
        st.write("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c b·∫£o v·ªá th√™m b·∫±ng Differential Privacy.")
else:
    st.warning("‚ö†Ô∏è H√£y ch·∫°y Giai ƒëo·∫°n 1 tr∆∞·ªõc khi √°p d·ª•ng Giai ƒëo·∫°n 2 (DP).")
